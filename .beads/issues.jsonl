{"id":"chess-1","title":"Setup project structure with HTML/CSS/JS files","description":"Create basic file structure: index.html, chess.js, styles.css","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:22:53.431350771-07:00"}
{"id":"chess-10","title":"Create move notation converter function","description":"Add function to convert internal move data to algebraic chess notation (e.g., 'e4', 'Nf3', 'O-O')","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-22T16:46:21Z"}
{"id":"chess-11","title":"Add move history panel to HTML","description":"Create a new panel in index.html to display the list of moves, positioned next to the board","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-22T16:46:21Z"}
{"id":"chess-12","title":"Style the move history panel","description":"Add CSS styling for the move history panel with proper layout, scrolling, and typography","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-22T16:46:21Z","dependencies":[{"issue_id":"chess-12","depends_on_id":"chess-11","type":"blocks","created_at":"2025-10-22T18:12:12.437618528-04:00","created_by":"import"}]}
{"id":"chess-13","title":"Update move history display after each move","description":"Call renderMoveHistory() after each move to update the displayed list in the UI","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-22T16:46:21Z","dependencies":[{"issue_id":"chess-13","depends_on_id":"chess-10","type":"blocks","created_at":"2025-10-22T18:12:12.443995274-04:00","created_by":"import"},{"issue_id":"chess-13","depends_on_id":"chess-11","type":"blocks","created_at":"2025-10-22T18:12:12.450165169-04:00","created_by":"import"}]}
{"id":"chess-14","title":"Add move numbering and formatting","description":"Format move history with proper chess notation: pair white/black moves by turn number (e.g., '1. e4 e5 2. Nf3 Nc6')","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-22T16:46:21Z","dependencies":[{"issue_id":"chess-14","depends_on_id":"chess-13","type":"blocks","created_at":"2025-10-22T18:12:12.456553676-04:00","created_by":"import"}]}
{"id":"chess-15","title":"Update repository after reorganization","description":"Repository was reorganized: moved chess.js to src/, tests to test/, docs to docs/. Need to verify all file references are correct (package.json, index.html, test files) and update any documentation.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-24T09:39:20.662287626-04:00","updated_at":"2025-10-24T09:40:25.99287724-04:00","closed_at":"2025-10-24T09:40:25.99287724-04:00"}
{"id":"chess-16","title":"Fix Docker dev container startup issues","description":"## Problem\n\nThe Docker dev container was failing to start after Docker Desktop restarts or WSL2 VM resets, causing two main issues:\n\n### Issue 1: Stale Container Bind Mounts\nVS Code created containers with bind mounts to temporary Wayland sockets. When Docker Desktop restarted, these sockets disappeared, leaving stale containers that could not restart.\n\nError: bind source path does not exist\n\n### Issue 2: Windows Line Endings in init-firewall.sh\nThe init-firewall.sh script had CRLF line endings instead of LF, causing the shebang to fail.\n\nError: sudo: unable to execute /usr/local/bin/init-firewall.sh\n\n## Solutions Implemented\n\n### Permanent Fix for Stale Containers\nAdded --rm flag to runArgs in .devcontainer/devcontainer.json:15. Containers now auto-remove when they exit, preventing accumulation of stale containers.\n\n### Fixed Line Endings\nConverted .devcontainer/init-firewall.sh from CRLF to LF.\n\n## Files Modified\n- .devcontainer/devcontainer.json (added --rm flag)\n- .devcontainer/init-firewall.sh (converted line endings)\n\n## Testing\nVerified container rebuilds successfully and postStartCommand executes without errors.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-24T09:53:58.776408154-04:00","updated_at":"2025-10-24T09:54:50.976613939-04:00","closed_at":"2025-10-24T09:54:50.976613939-04:00"}
{"id":"chess-17","title":"Fix line endings for Docker compatibility","description":"Added .gitattributes file to enforce LF line endings for shell scripts and Docker-related files. Previously, git autocrlf=true was converting LF to CRLF on Windows, which broke the Docker container (particularly init-firewall.sh). The .gitattributes file ensures shell scripts, Dockerfiles, and Linux-specific files always use LF, while Windows batch files use CRLF. This fix ensures consistent line endings across all platforms and prevents Docker startup failures.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-24T10:03:03.356806342-04:00","updated_at":"2025-10-24T10:03:15.20573898-04:00","closed_at":"2025-10-24T10:03:15.20573898-04:00"}
{"id":"chess-18","title":"Write tests for undo move functionality","description":"Create comprehensive tests for undo move feature: test undoing regular moves, captures, castling, en passant, pawn promotion. Verify board state, hasMoved flags, turn switching, and game state restoration.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-24T07:07:00.471001718-07:00","updated_at":"2025-10-24T07:15:45.942236635-07:00","closed_at":"2025-10-24T07:15:45.942236635-07:00"}
{"id":"chess-19","title":"Enhance move history to store complete state","description":"Modify movePiece() to store hasMoved flags for all pieces involved and enPassantTarget state before each move. Update move history object structure to include: previousEnPassantTarget, piecesHasMoved (fromPiece and capturedPiece hasMoved flags), and previous game state.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-24T07:07:00.743160402-07:00","updated_at":"2025-10-24T07:17:37.213103639-07:00","closed_at":"2025-10-24T07:17:37.213103639-07:00","dependencies":[{"issue_id":"chess-19","depends_on_id":"chess-18","type":"blocks","created_at":"2025-10-24T07:07:15.92842785-07:00","created_by":"daemon"}]}
{"id":"chess-2","title":"Implement chess board data model","description":"8x8 array representing board state, piece positions, colors","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:23:43.755788995-07:00","dependencies":[{"issue_id":"chess-2","depends_on_id":"chess-1","type":"blocks","created_at":"2025-10-22T18:12:12.369220476-04:00","created_by":"import"}]}
{"id":"chess-20","title":"Implement undoMove() method","description":"Create undoMove() method in ChessGame class that: 1) Reverses last move from moveHistory, 2) Restores piece positions, 3) Restores hasMoved flags, 4) Restores enPassantTarget, 5) Updates currentTurn and turnNumber, 6) Resets game over state if needed, 7) Re-renders board and move history.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-24T07:07:00.986912904-07:00","updated_at":"2025-10-24T07:19:21.238649647-07:00","closed_at":"2025-10-24T07:19:21.238649647-07:00","dependencies":[{"issue_id":"chess-20","depends_on_id":"chess-19","type":"blocks","created_at":"2025-10-24T07:07:15.962609836-07:00","created_by":"daemon"}]}
{"id":"chess-21","title":"Add undo button to UI","description":"Add undo button to index.html next to reset button. Wire up click handler in attachEventListeners(). Button should be disabled when moveHistory is empty. Update button state after each move and undo.","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-24T07:07:01.382627963-07:00","updated_at":"2025-10-24T07:22:07.318803032-07:00","closed_at":"2025-10-24T07:22:07.318803032-07:00","dependencies":[{"issue_id":"chess-21","depends_on_id":"chess-20","type":"blocks","created_at":"2025-10-24T07:07:15.986516591-07:00","created_by":"daemon"}]}
{"id":"chess-22","title":"Fix inconsistent button styling for Undo Move and New Game buttons","description":"The Undo Move and New Game buttons in index.html have different appearances, which looks strange. They should have consistent styling.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-24T07:40:25.296819214-07:00","updated_at":"2025-10-24T07:41:26.415486254-07:00","closed_at":"2025-10-24T07:41:26.415486254-07:00"}
{"id":"chess-23","title":"Add confirmation prompt for New Game button","description":"When user clicks 'New Game' button, show an 'Are you sure?' confirmation dialog before resetting the game. This prevents accidental game resets. Implementation should use native browser confirm() dialog for simplicity.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-24T07:51:50.828943444-07:00","updated_at":"2025-10-24T07:52:35.603826801-07:00","closed_at":"2025-10-24T07:52:35.603826801-07:00"}
{"id":"chess-3","title":"Render chessboard UI in browser","description":"Draw 8x8 grid with alternating colors, render pieces","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:24:39.229152053-07:00","dependencies":[{"issue_id":"chess-3","depends_on_id":"chess-1","type":"blocks","created_at":"2025-10-22T18:12:12.37610926-04:00","created_by":"import"},{"issue_id":"chess-3","depends_on_id":"chess-2","type":"blocks","created_at":"2025-10-22T18:12:12.382543016-04:00","created_by":"import"}]}
{"id":"chess-4","title":"Implement piece movement logic","description":"Legal move validation for each piece type (pawn, knight, bishop, rook, queen, king)","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:25:32.343826916-07:00","dependencies":[{"issue_id":"chess-4","depends_on_id":"chess-2","type":"blocks","created_at":"2025-10-22T18:12:12.390080008-04:00","created_by":"import"}]}
{"id":"chess-5","title":"Add click handlers for piece selection and moves","description":"Allow players to select pieces and make moves via clicking","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:26:14.787705535-07:00","dependencies":[{"issue_id":"chess-5","depends_on_id":"chess-3","type":"blocks","created_at":"2025-10-22T18:12:12.397561578-04:00","created_by":"import"},{"issue_id":"chess-5","depends_on_id":"chess-4","type":"blocks","created_at":"2025-10-22T18:12:12.404119634-04:00","created_by":"import"}]}
{"id":"chess-6","title":"Implement turn management","description":"Track whose turn it is, enforce alternating turns","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:27:17.474247937-07:00","dependencies":[{"issue_id":"chess-6","depends_on_id":"chess-5","type":"blocks","created_at":"2025-10-22T18:12:12.410642086-04:00","created_by":"import"}]}
{"id":"chess-7","title":"Add check and checkmate detection","description":"Detect when king is in check, validate legal moves don't put own king in check, detect checkmate","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:28:53.799250255-07:00","dependencies":[{"issue_id":"chess-7","depends_on_id":"chess-4","type":"blocks","created_at":"2025-10-22T18:12:12.417423736-04:00","created_by":"import"},{"issue_id":"chess-7","depends_on_id":"chess-6","type":"blocks","created_at":"2025-10-22T18:12:12.423999171-04:00","created_by":"import"}]}
{"id":"chess-8","title":"Add special moves: castling, en passant, promotion","description":"Implement special chess rules","status":"closed","priority":4,"issue_type":"feature","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:30:29.163396903-07:00","dependencies":[{"issue_id":"chess-8","depends_on_id":"chess-7","type":"blocks","created_at":"2025-10-22T18:12:12.43063236-04:00","created_by":"import"}]}
{"id":"chess-9","title":"I am unable to move chess pieces by clicking on them","description":"","notes":"The bug still persists - chess pieces are not clickable. Need to create a unit test to reproduce the issue and verify the fix.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-22T18:12:12.350644561-04:00","updated_at":"2025-10-22T18:12:12.350644561-04:00","closed_at":"2025-10-20T15:48:50.432289999-07:00"}
{"id":"chess-24","title":"Create board evaluation function","description":"Implement a board evaluation function that assigns a numeric score to a chess position. The function should calculate material balance using standard piece values (Pawn=1, Knight=3, Bishop=3, Rook=5, Queen=9, King=0). Include basic positional bonuses for piece placement (e.g., center control, piece activity). Return positive scores for positions favoring the AI player and negative scores for positions favoring the opponent. This will be the foundation for the minimax algorithm.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00"}
{"id":"chess-25","title":"Write tests for board evaluation function","description":"Create comprehensive unit tests for the board evaluation function. Test cases should include: 1) Starting position should evaluate to ~0 (equal position), 2) Material advantage scenarios (extra pawn, piece, queen), 3) Positional advantage scenarios (center control, piece activity), 4) Verify symmetry (flipped position gives opposite score), 5) Edge cases (bare kings, heavily imbalanced positions). Tests should validate the evaluation function works correctly before integrating into minimax.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-25","depends_on_id":"chess-24","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-26","title":"Implement core minimax algorithm","description":"Implement the minimax algorithm to search the game tree and find the best move. The algorithm should: 1) Recursively explore possible moves up to a specified depth, 2) Use the evaluation function at leaf nodes, 3) Maximize score for AI player's turns and minimize for opponent's turns, 4) Return the best move found along with its evaluation score. Start with a basic implementation without optimizations. The depth parameter should be configurable. This builds on the evaluation function from chess-24.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-26","depends_on_id":"chess-24","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-27","title":"Write tests for minimax algorithm","description":"Create unit tests for the minimax algorithm. Test cases should include: 1) Mate in 1 scenarios (should find the checkmate move), 2) Forced capture scenarios (should capture hanging pieces), 3) Depth limiting (verify algorithm respects max depth), 4) Move ordering (verify best moves are considered), 5) Verify minimax returns valid legal moves. Use simple positions with known best moves to validate the algorithm's correctness.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-27","depends_on_id":"chess-26","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-28","title":"Add alpha-beta pruning to minimax","description":"Optimize the minimax algorithm by implementing alpha-beta pruning. This will significantly reduce the number of nodes evaluated by pruning branches that cannot influence the final decision. Track alpha (best value for maximizer) and beta (best value for minimizer) parameters. Skip evaluating a position when a better move is already known. This optimization will allow searching deeper with the same computational resources, making the AI stronger without changing its core logic.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-28","depends_on_id":"chess-26","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-29","title":"Write tests for alpha-beta pruning","description":"Create tests to verify alpha-beta pruning correctness and performance. Test cases should include: 1) Verify alpha-beta returns same move as basic minimax (correctness), 2) Count nodes evaluated (should be significantly fewer than minimax), 3) Test pruning on positions with clear best moves (many branches should be pruned), 4) Verify pruning works at various depths. The algorithm should be faster while producing identical results to the basic minimax implementation.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-29","depends_on_id":"chess-28","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-30","title":"Add configurable search depth parameter","description":"Implement a configurable depth parameter for the minimax algorithm to control the strength/difficulty of the AI. Allow setting different depth values (e.g., 1=very easy, 2=easy, 3=medium, 4=hard, 5=very hard). Higher depths will search further ahead but take more time. The depth should be passed as a parameter to the minimax function. Document the relationship between depth and approximate thinking time. This prepares for UI integration where users can select difficulty levels.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-30","depends_on_id":"chess-28","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-31","title":"Create AI player class/module","description":"Create a dedicated AI player class or module that encapsulates the minimax algorithm and evaluation function. The AI should have methods like: 1) getMove(board, depth) - returns the best move for current position, 2) setDifficulty(level) - configures search depth based on difficulty, 3) Configuration for which color the AI plays (black/white). This provides a clean interface for integrating the AI into the game loop and makes it easy to configure AI behavior.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-31","depends_on_id":"chess-30","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-32","title":"Integrate AI player into game loop","description":"Integrate the AI player into the ChessGame class. After a human player makes a move, if it's the AI's turn, automatically call the AI to get and execute its move. Add logic to: 1) Detect when it's AI's turn, 2) Call AI.getMove() with current board state, 3) Execute the AI's chosen move, 4) Update the UI appropriately. Add a small delay before AI moves to make the game feel more natural. The AI should respect all existing game rules (check, checkmate, stalemate detection).","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-32","depends_on_id":"chess-31","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
{"id":"chess-33","title":"Write integration tests for AI gameplay","description":"Create end-to-end integration tests for playing against the AI. Test scenarios should include: 1) AI can complete a full game without errors, 2) AI respects game rules (doesn't make illegal moves), 3) AI responds to check appropriately, 4) AI recognizes checkmate/stalemate, 5) AI performs reasonably (doesn't blunder pieces immediately at higher depths), 6) Test with AI playing as both white and black. These tests ensure the complete AI integration works correctly with the existing game logic.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-25T20:10:00.000000000-04:00","updated_at":"2025-10-25T20:10:00.000000000-04:00","dependencies":[{"issue_id":"chess-33","depends_on_id":"chess-32","type":"blocks","created_at":"2025-10-25T20:10:00.000000000-04:00","created_by":"claude"}]}
